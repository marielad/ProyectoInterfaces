package flappy.database;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import flappy.reports.Partida;

import org.hsqldb.Server;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.server.ServerAcl.AclFormatException;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

/**
 * Clase que configura la construcción de la base de datos embebida
 * @author Jorge Delgado, Mariela Dorta, Daniel Paredes
 */

public class ScoreDB {

	Connection conn;
	Statement stmt;
	
	JasperPrint jp;
	InputStream is;
	Task<Statement> tarea;
	Task<JasperPrint> tarea2;
	
	public List<Partida> datosJasper = new ArrayList<>();
	public ObservableList<String> datos = FXCollections.observableArrayList();
	
	/**
	 * Constructor de la base de datos HSLQDB:
	 * Creamos una tabla con los campos IDJugador, Nombre y Puntos
	 */
	
	public ScoreDB() {

		HsqlProperties hsqlProperties = new HsqlProperties();
		hsqlProperties.setProperty("server.database.0",
		"db\\FlappyDB");

		hsqlProperties.setProperty("server.dbname.0", "mdb");
		Server server = new Server();
		
		try {
			server.setProperties(hsqlProperties);

		} catch (IOException | AclFormatException e) {
			e.printStackTrace();
		}
		
		server.setTrace(true);
		server.start();
		
		tarea = new Task<Statement>() {
			protected Statement call() throws Exception {
				Class.forName("org.hsqldb.jdbc.JDBCDriver");
				conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/mdb", "SA", "");
				stmt = conn.createStatement();
				return stmt;
			}
		};
		tarea.setOnSucceeded(a -> {
			try {
				stmt.executeQuery("CREATE TABLE IF NOT EXISTS Puntuaciones (\r\n" + 
						" IDJugador INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1),\r\n" + 
						" Nombre VARCHAR(10) NOT NULL, \r\n" + 
						" Puntos INTEGER NOT NULL,\r\n" + 
						" PRIMARY KEY (IDJugador)\r\n" + 
						");\r\n" + 
						"");
				stmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		});
		new Thread(tarea).start();
	}
	
	/**
	 * cargarPuntuaciones() hace la consulta que guardaremos en HighScore
	 * @throws SQLException
	 * @throws JRException
	 * @throws IOException
	 */
	
	public void cargarPuntuaciones() {
		datos.clear();
		tarea = new Task<Statement>() {
			protected Statement call() throws Exception {
				stmt = conn.createStatement();
				return stmt;
			}
		};
		tarea.setOnSucceeded(a -> {
			try {
				int top = 1;
				ResultSet rstSet = stmt.executeQuery("SELECT TOP 10 Nombre, Puntos FROM Puntuaciones ORDER BY Puntos DESC");
				stmt.close();
				while (rstSet.next()) {
					
					String nomb = rstSet.getString(1);
					int puntos = rstSet.getInt(2);

					datos.add((top++) + ".- " + nomb + " " + puntos);
					
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			
		});
		new Thread(tarea).start();
	}
	
	/**
	 * cargarJasper() hace la consulta que guardaremos en el JasperReport
	 * @throws SQLException
	 * @throws JRException
	 * @throws IOException
	 */
	
	public void cargarJasper(){
		datosJasper.clear();
		Map<String, Object> parametros = new HashMap<>();
		tarea = new Task<Statement>() {
			protected Statement call() throws Exception {
				stmt = conn.createStatement();
				return stmt;
			}
		};
		tarea.setOnSucceeded(a -> {
			try {
				ResultSet rstSet = stmt.executeQuery("SELECT Nombre, Puntos FROM Puntuaciones ORDER BY Puntos DESC");
				stmt.close();
				while (rstSet.next()) {
					LocalDate fecha = LocalDate.now();
					String nomb = rstSet.getString(1);
					int puntos = rstSet.getInt(2);
					datosJasper.add(new Partida(nomb, puntos, fecha));
					is = ScoreDB.class.getResourceAsStream("/flappy/reports/InformePuntuaciones.jasper");
					parametros.put("TITULO", "Mariela Dorta - Jorge Delgado - Daniel Paredes");
				}
				tarea2 = new Task<JasperPrint>() {
					protected JasperPrint call() throws Exception {
						jp = JasperFillManager.fillReport(is, parametros, new JRBeanCollectionDataSource(datosJasper));
						return jp;
					}
				};
				tarea2.setOnSucceeded(b -> {
					try {
						JasperExportManager.exportReportToPdfFile(jp, "report\\Informe.pdf");
						Desktop.getDesktop().open(new File("report\\Informe.pdf"));
					} catch (JRException | IOException e) {
						e.printStackTrace();
					}
				});
				new Thread(tarea2).start();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		});
		new Thread(tarea).start();
	}
	
	/**
	 * insertarTabla(String nombre, int puntuacion) hace la 
	 * inserccion de la puntuacion en la base de datos del juego
	 */
	
	public void insertarTabla(String nombre, int puntuacion) {
		try {
			PreparedStatement pstmt =  conn.prepareStatement("INSERT INTO Puntuaciones VALUES (DEFAULT, ?, ?)");
			pstmt.setString(1, nombre);
			pstmt.setInt(2, puntuacion);
			
			pstmt.execute();
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Recuperamos la conexión SQL
	 * @return conn
	 */
	
	public Connection getConexion() {
		return conn;
	}

	/**
	 * closeConexion() sirve para cerrar la conexion HSQLDB
	 */
	
	public void closeConexion() {
		tarea = new Task<Statement>() {
			protected Statement call() throws Exception {
				stmt = conn.createStatement();
				stmt.executeQuery("SHUTDOWN COMPACT");
				return stmt;
			}
		};
		tarea.setOnSucceeded(a -> {
			try {

				stmt.close();
				conn.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		});
		new Thread(tarea).start();
	}
}
